<?xml version="1.0"?>
<doc>
    <assembly>
        <name>NetworkSocket.Fast</name>
    </assembly>
    <members>
        <member name="T:NetworkSocket.Fast.Attributes.ServiceAttribute">
            <summary>
            表示服务方法特性
            </summary>
        </member>
        <member name="M:NetworkSocket.Fast.Attributes.ServiceAttribute.#ctor(NetworkSocket.Fast.Attributes.Implements,System.Int32)">
            <summary>
            修饰方法行为的特性
            </summary>       
            <param name="implement">实现者</param>
            <param name="cmd">命令值</param>
        </member>
        <member name="P:NetworkSocket.Fast.Attributes.ServiceAttribute.Implement">
            <summary>
            实现服务的目标
            </summary>
        </member>
        <member name="P:NetworkSocket.Fast.Attributes.ServiceAttribute.Command">
            <summary>
            方法对应的数据包命令值
            </summary>
        </member>
        <member name="T:NetworkSocket.Fast.Attributes.Implements">
            <summary>
            表示服务的实现者
            </summary>
        </member>
        <member name="F:NetworkSocket.Fast.Attributes.Implements.Self">
            <summary>
            由自身实现
            </summary>
        </member>
        <member name="F:NetworkSocket.Fast.Attributes.Implements.Remote">
            <summary>
            由远程实现
            </summary>
        </member>
        <member name="T:NetworkSocket.Fast.FastTcpClientBase">
            <summary>
            快速构建Tcp客户端抽象类
            </summary>
        </member>
        <member name="F:NetworkSocket.Fast.FastTcpClientBase.serverMethods">
            <summary>
            所有服务方法
            </summary>
        </member>
        <member name="M:NetworkSocket.Fast.FastTcpClientBase.#ctor">
            <summary>
            快速构建Tcp服务端
            </summary>
        </member>
        <member name="M:NetworkSocket.Fast.FastTcpClientBase.OnReceive(NetworkSocket.ByteBuilder)">
            <summary>
            当接收到远程端的数据时，将触发此方法
            此方法用于处理和分析收到的数据
            如果得到一个数据包，将触发OnRecvComplete方法
            [注]这里只需处理一个数据包的流程
            </summary>
            <param name="recvBuilder">接收到的历史数据</param>
            <returns>如果不够一个数据包，则请返回null</returns>
        </member>
        <member name="M:NetworkSocket.Fast.FastTcpClientBase.OnRecvComplete(NetworkSocket.Fast.FastPacket)">
            <summary>
            当接收到服务发来的数据包时，将触发此方法
            </summary>
            <param name="packet">数据包</param>
        </member>
        <member name="M:NetworkSocket.Fast.FastTcpClientBase.InvokeService(NetworkSocket.Fast.Methods.ServiceMethod,NetworkSocket.Fast.FastPacket)">
            <summary>
            调用服务方法
            </summary>    
            <param name="method">方法</param>
            <param name="packet">数据</param>
        </member>
        <member name="M:NetworkSocket.Fast.FastTcpClientBase.OnException(System.Exception,NetworkSocket.Fast.FastPacket)">
            <summary>
            当操作中遇到处理异常时，将触发此方法
            </summary>  
            <param name="exception">异常</param>
            <param name="packet">相关数据</param>      
        </member>
        <member name="M:NetworkSocket.Fast.FastTcpClientBase.InvokeRemote(System.Int32,System.Object[])">
            <summary>
            将数据发送到远程端        
            </summary>       
            <param name="cmd">数据包的Action值</param>
            <param name="parameters">参数列表</param>
        </member>
        <member name="M:NetworkSocket.Fast.FastTcpClientBase.InvokeRemote``1(System.Int32,System.Object[])">
            <summary>
            将数据发送到远程端     
            并返回结果数据任务
            </summary>
            <typeparam name="T">返回值类型</typeparam>
            <param name="cmd">数据包的命令值</param>
            <param name="parameters"></param>
            <returns>参数列表</returns>
        </member>
        <member name="M:NetworkSocket.Fast.FastTcpClientBase.Dispose(System.Boolean)">
            <summary>
            释放资源
            </summary>
            <param name="disposing">是否也释放托管资源</param>
        </member>
        <member name="P:NetworkSocket.Fast.FastTcpClientBase.Serializer">
            <summary>
            获取或设置序列化工具
            默认是Json序列化
            </summary>
        </member>
        <member name="T:NetworkSocket.Fast.FastTcpServerBase">
            <summary>
            快速构建Tcp服务端抽象类 
            </summary>
        </member>
        <member name="F:NetworkSocket.Fast.FastTcpServerBase.serverMethods">
            <summary>
            所有服务方法
            </summary>
        </member>
        <member name="M:NetworkSocket.Fast.FastTcpServerBase.#ctor">
            <summary>
            快速构建Tcp服务端
            </summary>
        </member>
        <member name="M:NetworkSocket.Fast.FastTcpServerBase.CheckServiceMethods(System.Collections.Generic.IEnumerable{NetworkSocket.Fast.Methods.ServiceMethod})">
            <summary>
            检测服务方法的声明和参数
            </summary>
            <param name="methods">服务方法</param>
        </member>
        <member name="M:NetworkSocket.Fast.FastTcpServerBase.OnReceive(NetworkSocket.SocketAsync{NetworkSocket.Fast.FastPacket},NetworkSocket.ByteBuilder)">
            <summary>
            当接收到远程端的数据时，将触发此方法
            此方法用于处理和分析收到的数据
            如果得到一个数据包，将触发OnRecvComplete方法
            [注]这里只需处理一个数据包的流程
            </summary>
            <param name="client">客户端</param>
            <param name="recvBuilder">接收到的历史数据</param>
            <returns>如果不够一个数据包，则请返回null</returns>
        </member>
        <member name="M:NetworkSocket.Fast.FastTcpServerBase.OnRecvComplete(NetworkSocket.SocketAsync{NetworkSocket.Fast.FastPacket},NetworkSocket.Fast.FastPacket)">
            <summary>
            当接收到客户端数据包时，将触发此方法
            </summary>
            <param name="client">客户端</param>
            <param name="packet">数据包</param>
        </member>
        <member name="M:NetworkSocket.Fast.FastTcpServerBase.InvokeService(NetworkSocket.Fast.Methods.ServiceMethod,NetworkSocket.SocketAsync{NetworkSocket.Fast.FastPacket},NetworkSocket.Fast.FastPacket)">
            <summary>
            调用服务方法
            </summary>       
            <param name="method">方法</param>
            <param name="client">客户端对象</param>
            <param name="packet">数据</param>
        </member>
        <member name="M:NetworkSocket.Fast.FastTcpServerBase.GetParameters(NetworkSocket.Fast.Methods.ServiceMethod,NetworkSocket.SocketAsync{NetworkSocket.Fast.FastPacket},NetworkSocket.Fast.FastPacket)">
            <summary>
            生成服务方法的调用参数
            </summary>       
            <param name="method">方法</param>
            <param name="client">客户端对象</param>
            <param name="packet">数据</param>
        </member>
        <member name="M:NetworkSocket.Fast.FastTcpServerBase.OnException(NetworkSocket.SocketAsync{NetworkSocket.Fast.FastPacket},System.Exception,NetworkSocket.Fast.FastPacket)">
            <summary>
            当操作中遇到处理异常时，将触发此方法
            </summary>
            <param name="client">客户端</param>
            <param name="exception">异常</param>
            <param name="packet">相关数据事件</param>        
        </member>
        <member name="M:NetworkSocket.Fast.FastTcpServerBase.InvokeRemote(NetworkSocket.SocketAsync{NetworkSocket.Fast.FastPacket},System.Int32,System.Object[])">
            <summary>
            将数据发送到远程端        
            </summary>
            <param name="client">客户端</param>
            <param name="cmd">数据包的Action值</param>
            <param name="parameters">参数列表</param>
        </member>
        <member name="M:NetworkSocket.Fast.FastTcpServerBase.InvokeRemote``1(NetworkSocket.SocketAsync{NetworkSocket.Fast.FastPacket},System.Int32,System.Object[])">
            <summary>
            将数据发送到远程端     
            并返回结果数据任务
            </summary>
            <typeparam name="T">返回值类型</typeparam>
            <param name="client">客户端</param>
            <param name="cmd">数据包的命令值</param>
            <param name="parameters"></param>
            <returns>参数列表</returns>
        </member>
        <member name="M:NetworkSocket.Fast.FastTcpServerBase.ToProxyCode">
            <summary>
            生成客户端代理代码
            </summary>
            <returns></returns>
        </member>
        <member name="M:NetworkSocket.Fast.FastTcpServerBase.Dispose(System.Boolean)">
            <summary>
            释放资源
            </summary>
            <param name="disposing">是否也释放托管资源</param>
        </member>
        <member name="P:NetworkSocket.Fast.FastTcpServerBase.Serializer">
            <summary>
            获取或设置序列化工具
            默认是Json序列化
            </summary>
        </member>
        <member name="T:NetworkSocket.Fast.Attributes.FilterAttribute">
            <summary>
            表示服务器服务方法过滤器基础特性
            </summary>
        </member>
        <member name="M:NetworkSocket.Fast.Attributes.FilterAttribute.OnExecuting(NetworkSocket.SocketAsync{NetworkSocket.Fast.FastPacket},NetworkSocket.Fast.FastPacket)">
            <summary>
            在执行服务方法前触发
            如果返回false，将不执行服务方法
            </summary>
            <param name="client">客户端</param>
            <param name="packet">数据包</param>
            <returns></returns>
        </member>
        <member name="P:NetworkSocket.Fast.Attributes.FilterAttribute.Order">
            <summary>
            执行顺序
            越小最优先
            </summary>
        </member>
        <member name="T:NetworkSocket.Fast.DefaultSerializer">
            <summary>
            默认提供的Json序列化工具
            </summary>
        </member>
        <member name="T:NetworkSocket.Fast.ISerializer">
            <summary>
            定义对象的序列化与反序列化的接口
            </summary>
        </member>
        <member name="M:NetworkSocket.Fast.ISerializer.Serialize(System.Object)">
            <summary>
            序列化为二进制
            </summary>
            <param name="model">实体</param>
            <returns></returns>
        </member>
        <member name="M:NetworkSocket.Fast.ISerializer.Deserialize(System.Byte[],System.Type)">
            <summary>
            反序列化为实体
            </summary>
            <param name="bytes">数据</param>
            <param name="type">实体类型</param>
            <returns></returns>
        </member>
        <member name="M:NetworkSocket.Fast.DefaultSerializer.Serialize(System.Object)">
            <summary>
            序列化为二进制
            </summary>
            <param name="model">实体</param>
            <returns></returns>
        </member>
        <member name="M:NetworkSocket.Fast.DefaultSerializer.Deserialize(System.Byte[],System.Type)">
            <summary>
            反序列化为实体
            </summary>
            <param name="bytes">数据</param>
            <param name="type">实体类型</param>
            <returns></returns>
        </member>
        <member name="T:NetworkSocket.Fast.Methods.FastMethod">
            <summary>
            通过表达式生成方法调用的委托
            并将委托缓存
            </summary>
        </member>
        <member name="F:NetworkSocket.Fast.Methods.FastMethod.handler">
            <summary>
            委托
            </summary>
        </member>
        <member name="M:NetworkSocket.Fast.Methods.FastMethod.#ctor(System.Reflection.MethodInfo)">
            <summary>
            通过表达式生成方法调用的委托
            </summary>
            <param name="method">方法信息</param>
        </member>
        <member name="M:NetworkSocket.Fast.Methods.FastMethod.Invoke(System.Object,System.Object[])">
            <summary>
            动态执行方法
            </summary>
            <param name="instance">方法所在的实例</param>
            <param name="parameters">方法的参数</param>
            <returns></returns>
        </member>
        <member name="M:NetworkSocket.Fast.Methods.FastMethod.CreateHandler(System.Reflection.MethodInfo)">
            <summary>
            生成方法的委托
            </summary>
            <param name="method">方法信息</param>
            <returns></returns>
        </member>
        <member name="M:NetworkSocket.Fast.Methods.FastMethod.GetHashCode">
            <summary>
            获取哈希值
            </summary>
            <returns></returns>
        </member>
        <member name="M:NetworkSocket.Fast.Methods.FastMethod.Equals(System.Object)">
            <summary>
            是否与目标相等
            </summary>
            <param name="obj">目标</param>
            <returns></returns>
        </member>
        <member name="M:NetworkSocket.Fast.Methods.FastMethod.ToString">
            <summary>
            方法名
            </summary>
            <returns></returns>
        </member>
        <member name="P:NetworkSocket.Fast.Methods.FastMethod.Method">
            <summary>
            获取方法信息
            </summary>
        </member>
        <member name="T:NetworkSocket.Fast.Methods.ServiceMethod">
            <summary>
            表示带Service特性的方法信息
            </summary>
        </member>
        <member name="M:NetworkSocket.Fast.Methods.ServiceMethod.#ctor(System.Reflection.MethodInfo)">
            <summary>
            表示带Service特性的方法信息
            </summary>
            <param name="method">方法信息</param>
        </member>
        <member name="P:NetworkSocket.Fast.Methods.ServiceMethod.HasReturn">
            <summary>
            获取返回类型是否为非void
            </summary>
        </member>
        <member name="P:NetworkSocket.Fast.Methods.ServiceMethod.Parameters">
            <summary>
            获取方法的参数
            </summary>
        </member>
        <member name="P:NetworkSocket.Fast.Methods.ServiceMethod.ParameterTypes">
            <summary>
            获取方法的参数类型
            </summary>
        </member>
        <member name="P:NetworkSocket.Fast.Methods.ServiceMethod.ServiceAttribute">
            <summary>
            获取方法特性修饰
            </summary>
        </member>
        <member name="P:NetworkSocket.Fast.Methods.ServiceMethod.Filters">
            <summary>
            获取所有过滤器
            </summary>
        </member>
        <member name="T:NetworkSocket.Fast.FastPacket">
            <summary>
            通讯协议的封包
            </summary>
        </member>
        <member name="M:NetworkSocket.Fast.FastPacket.#ctor(System.Int32)">
            <summary>
            通讯协议的封包
            </summary>
            <param name="cmd">命令值</param>
        </member>
        <member name="M:NetworkSocket.Fast.FastPacket.#ctor(System.Int32,System.Int32,System.Byte[])">
            <summary>
            通讯协议的封包
            </summary>
            <param name="cmd">命令值</param>
            <param name="hashCode">哈希码</param>
            <param name="body">数据体</param>
        </member>
        <member name="M:NetworkSocket.Fast.FastPacket.ToByteArray">
            <summary>
            转换为二进制数据
            </summary>
            <returns></returns>
        </member>
        <member name="M:NetworkSocket.Fast.FastPacket.SetBodyBinary(NetworkSocket.Fast.ISerializer,System.Object[])">
            <summary>
            将参数序列化并写入为Body
            </summary>
            <param name="serializer">序列化工具</param>
            <param name="parameters">参数</param>
        </member>
        <member name="M:NetworkSocket.Fast.FastPacket.GetBodyParameter">
            <summary>
            将Body的数据解析为参数
            </summary>        
            <returns></returns>
        </member>
        <member name="M:NetworkSocket.Fast.FastPacket.GetPacket(NetworkSocket.ByteBuilder)">
            <summary>
            解析一个数据包       
            不足一个封包时返回null
            </summary>
            <param name="builder">接收到的历史数据</param>
            <returns></returns>
        </member>
        <member name="P:NetworkSocket.Fast.FastPacket.Command">
            <summary>
            获取命令值
            </summary>
        </member>
        <member name="P:NetworkSocket.Fast.FastPacket.HashCode">
            <summary>
            获取哈希值
            </summary>
        </member>
        <member name="P:NetworkSocket.Fast.FastPacket.Body">
            <summary>
            获取数据体的数据
            </summary>
        </member>
        <member name="T:NetworkSocket.Fast.CallbackTable">
            <summary>
            回调信息维护表
            所有方法都是线程安全
            </summary>
        </member>
        <member name="F:NetworkSocket.Fast.CallbackTable.dic">
            <summary>
            回调信息字典
            </summary>
        </member>
        <member name="M:NetworkSocket.Fast.CallbackTable.Add(System.Int32,System.Action{System.Byte[]})">
            <summary>
            添加回调信息记录       
            </summary>
            <param name="hashCode">哈希码</param>
            <param name="callBack">回调</param>       
            <returns></returns>
        </member>
        <member name="M:NetworkSocket.Fast.CallbackTable.Take(System.Int32)">
            <summary>
            通过哈希码查找并移除匹配记录
            返回匹配记录的回调信息
            如果没有匹配项，返回null
            </summary>
            <param name="hashCode">匹配的哈希码</param>
            <returns></returns>
        </member>
        <member name="T:NetworkSocket.Fast.ProxyCode">
            <summary>
            表示代理源码
            </summary>
        </member>
        <member name="M:NetworkSocket.Fast.ProxyCode.#ctor(System.String)">
            <summary>
            代理源码
            </summary>
            <param name="code">源码</param>
        </member>
        <member name="M:NetworkSocket.Fast.ProxyCode.WriteToFile(System.String)">
            <summary>
            将源码写入文件 
            </summary>
            <param name="filePath">文件路径</param>
        </member>
        <member name="M:NetworkSocket.Fast.ProxyCode.ToString">
            <summary>
            字符串显示
            </summary>
            <returns></returns>
        </member>
        <member name="P:NetworkSocket.Fast.ProxyCode.Code">
            <summary>
            源码
            </summary>
        </member>
        <member name="T:NetworkSocket.Fast.ProxyMaker">
            <summary>
            客户端代理生成
            </summary>
        </member>
        <member name="M:NetworkSocket.Fast.ProxyMaker.#ctor(System.Type)">
            <summary>
            客户端代理生成
            </summary>
            <param name="type">服务类型</param>
        </member>
        <member name="M:NetworkSocket.Fast.ProxyMaker.MakeCode(System.Type)">
            <summary>
            获取所有方法的代理代码
            </summary>
            <param name="type">服务类型</param>
            <returns></returns>
        </member>
        <member name="M:NetworkSocket.Fast.ProxyMaker.GetRemoteMethodCode(System.Reflection.MethodInfo,NetworkSocket.Fast.Attributes.ServiceAttribute)">
            <summary>
            获取客端方法代码
            </summary>
            <param name="method">方法</param>   
            <param name="service">特性</param>
            <returns></returns>
        </member>
        <member name="M:NetworkSocket.Fast.ProxyMaker.GetSelfMethodCode(System.Reflection.MethodInfo,NetworkSocket.Fast.Attributes.ServiceAttribute)">
            <summary>
            生成服务方法代码
            </summary>
            <param name="method">方法</param>
            <param name="service">特性</param>      
            <returns></returns>
        </member>
        <member name="M:NetworkSocket.Fast.ProxyMaker.FormatString(System.Int32,System.String,System.Object[])">
            <summary>
            格式化字符串
            </summary>
            <param name="leftSpace">左空格</param>
            <param name="farmat">格式</param>
            <param name="args">参数</param>
            <returns></returns>
        </member>
        <member name="M:NetworkSocket.Fast.ProxyMaker.GetTypeName(System.Type)">
            <summary>
            获取类型的字符串表达示
            </summary>
            <param name="type">类型</param>
            <returns></returns>
        </member>
        <member name="M:NetworkSocket.Fast.ProxyMaker.GetGenericTypeArgs(System.Type)">
            <summary>
            获取泛型参数
            </summary>
            <param name="type">类型</param>
            <returns></returns>
        </member>
        <member name="M:NetworkSocket.Fast.ProxyMaker.ToString">
            <summary>
            生成代理代码
            </summary>
            <returns></returns>
        </member>
        <member name="P:NetworkSocket.Fast.ProxyMaker.ClassName">
            <summary>
            类名
            </summary>
        </member>
        <member name="P:NetworkSocket.Fast.ProxyMaker.MethodCodeList">
            <summary>
            方法代码
            </summary>
        </member>
    </members>
</doc>
